<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>grille responsive &#8211; DesireLabs</title>
	<atom:link href="/tag/grille-responsive/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>D√©veloppement web, marketing digital, et r√©f√©rencement</description>
	<lastBuildDate>Tue, 06 Jun 2017 17:34:36 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.4</generator>
<site xmlns="com-wordpress:feed-additions:1">67143140</site>	<item>
		<title>Cr√©er son propre syst√®me de grille flexible avec SASS</title>
		<link>/creer-propre-systeme-de-grille-flexible-sass/</link>
		<comments>/creer-propre-systeme-de-grille-flexible-sass/#respond</comments>
		<pubDate>Tue, 18 Oct 2016 13:24:55 +0000</pubDate>
		<dc:creator><![CDATA[Franck]]></dc:creator>
				<category><![CDATA[HTML/CSS]]></category>
		<category><![CDATA[sass]]></category>
		<category><![CDATA[grille responsive]]></category>

		<guid isPermaLink="false">/?p=521</guid>
		<description><![CDATA[<p>Dans la bo√Æte √† outils de l‚Äôint√©grateur, il y a beaucoup de choses¬†: des frameworks html et css, des g√©n√©rateurs de d√©grad√©s de couleur, un ou plusieurs pr√©processeurs‚Ä¶ et surtout il y a les grilles responsives. Quand on travaille avec un framework css, ces derni√®res sont souvent (voire syst√©matiquement ) incluses. Impossible par ailleurs de &#8230; <a href="/creer-propre-systeme-de-grille-flexible-sass/" class="more-link">Continuer la lecture de <span class="screen-reader-text">Cr√©er son propre syst√®me de grille flexible avec SASS</span></a></p>
<p>L‚Äôarticle <a rel="nofollow" href="/creer-propre-systeme-de-grille-flexible-sass/">Cr√©er son propre syst√®me de grille flexible avec SASS</a> est apparu en premier sur <a rel="nofollow" href="/">DesireLabs</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p class="graf graf--p">Dans la bo√Æte √† outils de l‚Äôint√©grateur, il y a beaucoup de choses¬†: des frameworks html et css, des g√©n√©rateurs de d√©grad√©s de couleur, un ou plusieurs pr√©processeurs‚Ä¶ et surtout il y a les grilles responsives. Quand on travaille avec un framework css, ces derni√®res sont souvent (voire syst√©matiquement ) incluses. Impossible par ailleurs de d√©nombrer les syst√®mes de grille existants tant il y en a. Ce qui est s√ªr, c‚Äôest que nous avons le choix¬†! Mais parfois, il arrive que l‚Äôon soit amen√© √† cr√©er sois m√™me un syst√®me de grille pour des besoins tr√®s sp√©cifiques‚Ä¶ C‚Äôest ce qui m‚Äôest arriv√© r√©cemment.</p>
<p class="graf graf--p">C‚Äôest pourquoi je vous propose une approche de cr√©ation de grille reposant sur SASS. Il est entendu que c‚Äôest faisable en CSS, mais c‚Äôest beaucoup plus rapide en SASS, c‚Äôest la beaut√© de la chose¬†<img src="https://s.w.org/images/core/emoji/2.4/72x72/1f642.png" alt="üôÇ" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">Le d√©coupage du travail sera comme suit</strong>¬†: D‚Äôabord on d√©finira les diff√©rentes variables n√©cessaires ainsi que les points de rupture de notre grille responsive. Ensuite, on s‚Äôattardera sur la m√©canique standard pour la g√©n√©ration de la grille ‚Äúdesktop‚Äù. Enfin on fera de m√™me pour nos <code>media-queries</code>.</p>
<p class="graf graf--p"><strong class="markup--strong markup--p-strong">D√©finition de notre grille</strong>¬†: Elle sera responsive bien s√ªr, on pourra choisir combien de colonnes on souhaite, la taille des goutti√®res, la largeur globale du conteneur, et les comportements des colonnes sur les diff√©rents appareils.</p>
<p class="graf graf--p">Voici les variables que je d√©finis en premier lieu¬†:</p>
<p></p><pre class="crayon-plain-tag">/* 1. valeurs de grille par d&eacute;faut */

$cols: 12 !default;
$gutter-width: 1.2rem !default;
$max-width: 1180px !default;</pre><p></p>
<p class="graf graf--p">On aura donc 12 colonnes, avec une goutti√®re de 1.2rem et une largeur maximum de 1200px. Ces valeurs sont suffisantes pour jeter les bases de la cr√©ation de notre grille desktop. Ce que vous allons donc faire de ce pas¬†:</p>
<p></p><pre class="crayon-plain-tag">/* 2. D&eacute;finition de la grille */
.container {
  margin: 0 auto;
  width: 90%;
  max-width: $max-width;
}
.row {
  margin-left: 0;
  margin-right: 0;
  .row {
  	margin-left: -$gutter-width / 2;
  	margin-right: -$gutter-width / 2;
  }
  &amp;amp;:after {
    content: &quot;&quot;;
    display: table;
    clear: both;
  }
  /* on divise la goutti&egrave;re par 2 car on en retire une partie de chaque c&ocirc;t&eacute; de la colonne */
  .col {
    float: left;
    box-sizing: border-box;
    padding: 0 $gutter-width / 2;
    margin-left: auto;
    left: auto;
    right: auto;

    /* On va boucler sur les colonnes et calculer automatiquement leur taille en pourcentage
     * un peu comme on pourrait le faire en javascript par exemple */
    $i: 1;
    @while $i &amp;lt;= $cols {
      $perc: unquote((100 / ($cols / $i)) + &quot;%&quot;);
      &amp;amp;.small-#{$i} {
        width: $perc;
      }
      $i: $i + 1;
    }
  }
}</pre><p></p>
<p class="graf graf--p">Dans ce syst√®me, ce sont les paddings qui d√©finissent la taille de la goutti√®re. Ce qui fait que l‚Äôon n‚Äôa pas √† se casser la t√™te avec le calcul de marges, d‚Äôautant que ces derni√®res ne sont pas prises en compte par <code>box-sizing: border-box</code>. Et √ßa c‚Äôest c‚Äôest d√©j√† un pas vers plus de flexibilit√©¬†: on peut ajouter autant de colonnes que l‚Äôon souhaite √† notre ligne. Par ailleurs, plus de <code>row</code> ou <code>row-fluid</code> √† la Bootstrap 2 : d√©sormais toutes nos lignes sont fluides. Point. Seul le conteneur d√©finira la largeur maximale de rendu. Et √©tant donn√© que nos tailles sont calcul√©es en % on est tranquilles¬†<img src="https://s.w.org/images/core/emoji/2.4/72x72/1f642.png" alt="üôÇ" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p class="graf graf--p">A pr√©sent il ne reste plus qu‚Äô√† g√©n√©rer cette grille pour les tailles d‚Äô√©cran choisies¬†:</p>
<p></p><pre class="crayon-plain-tag">@media screen and (min-width:721px) {

      $i: 1;
      @while $i &amp;lt;= $cols {
        $perc: unquote((100 / ($cols / $i)) + &quot;%&quot;);
        &amp;amp;.medium-#{$i} {
          width: $perc;
        }
        $i: $i + 1
      }
    }

    @media screen and (min-width:1025px) {

      $i: 1;
      @while $i &amp;lt;= $cols {
        $perc: unquote((100 / ($cols / $i)) + &quot;%&quot;);
        &amp;amp;.large-#{$i} {
          width: $perc;
        }
        $i: $i + 1;
      }
    }</pre><p></p>
<p class="graf graf--p">Et c‚Äôest tout¬†! Bon on pourrait aller beaucoup plus loin en d√©finissant des comportements plus sp√©cifiques, mais la base est l√†. Voici le r√©sultat final¬†:</p>
<p></p><pre class="crayon-plain-tag">/* 1. valeurs de grille par d&eacute;faut */

$cols: 12 !default;
$gutter-width: 1.2rem !default;
$max-width: 1200px !default;</pre><p></p><pre class="crayon-plain-tag">/* 2. D&eacute;finition de la grille */
.container {
  margin: 0 auto;
  width: 90%;
  max-width: $max-width;
}
.row {
  margin-left: 0;
  margin-right: 0;
  .row {
  	margin-left: -$gutter-width / 2;
  	margin-right: -$gutter-width / 2;
  }
  &amp;amp;:after {
    content: &quot;&quot;;
    display: table;
    clear: both;
  }
  /* on divise la goutti&egrave;re par 2 car on en retire une partie de chaque c&ocirc;t&eacute; de la */
  .col {
    float: left;
    box-sizing: border-box;
    padding: 0 $gutter-width / 2;
    margin-left: auto;
    left: auto;
    right: auto;

    /* On va boucler sur les colonnes et calculer automatiquement leur taille en pourcentage
     * un peu comme on pourrait le faire en javascript par exemple */
    $i: 1;
    @while $i &amp;lt;= $cols {
      $perc: unquote((100 / ($cols / $i)) + &quot;%&quot;);
      &amp;amp;.small-#{$i} {
        width: $perc;
      }
      $i: $i + 1;
    }</pre><p></p><pre class="crayon-plain-tag">/* 3. Media Queries */
    @media screen and (min-width:721px) {

      $i: 1;
      @while $i &amp;lt;= $cols {
        $perc: unquote((100 / ($cols / $i)) + &quot;%&quot;);
        &amp;amp;.medium-#{$i} {
          width: $perc;
        }
        $i: $i + 1
      }
    }

    @media screen and (min-width:1025px) {

      $i: 1;
      @while $i &amp;lt;= $cols {
        $perc: unquote((100 / ($cols / $i)) + &quot;%&quot;);
        &amp;amp;.large-#{$i} {
          width: $perc;
        }
        $i: $i + 1;
      }
    }
  }
}</pre><p></p>
<p class="graf graf--p">Il est entendu que la propri√©t√© flexbox tend √† s‚Äôimposer pour ce qui est de la cr√©ation de syst√®mes destin√©s √† structurer le contenu. Je pense d‚Äôailleurs qu‚Äôelle pourrait √† terme remplacer nos syst√®mes de grille traditionnels. En revanche je pense que les syst√®mes comme celui que nous avons l√† on encore de beaux jours devant eux car ils restent √† ce jour l‚Äôapproche la plus stable car compatible avec n‚Äôimporte quel navigateur / appareil.</p>
<p class="graf graf--p">Mais je me penche depuis quelques temps d√©j√† sur flexbox, il n‚Äôest donc pas impossible que je fasse un article sur le sujet dans les semaines √† venir¬†<img src="https://s.w.org/images/core/emoji/2.4/72x72/1f609.png" alt="üòâ" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>L‚Äôarticle <a rel="nofollow" href="/creer-propre-systeme-de-grille-flexible-sass/">Cr√©er son propre syst√®me de grille flexible avec SASS</a> est apparu en premier sur <a rel="nofollow" href="/">DesireLabs</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/creer-propre-systeme-de-grille-flexible-sass/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">521</post-id>	</item>
	</channel>
</rss>
